/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2)
    {
        // ListNode headNode=new ListNode(0);
        // ListNode tail=headNode;
        // int carry=0;
        // while(l1!=null||l2!=null||carry!=0)
        // {
        //     int d1=(l1!=null)?l1.val:0;
        //     int d2=(l2!=null)?l2.val:0;
        //     int sum=d1+d2+carry;
        //     int d=sum%10;
        //     carry=sum/10;
        //     ListNode newNode=new ListNode(d);
        //     tail.next=newNode;
        //     tail=tail.next;
        //     l1=(l1!=null)?l1.next:null;
        //     l1=(l2!=null)?l2.next:null;

        // }   
        // ListNode result=headNode.next;
        // headNode.next=null;
        // return result;     
        ListNode dummyHead = new ListNode(0);
        ListNode tail = dummyHead;
        int carry = 0;

        while (l1 != null || l2 != null || carry != 0) {
            int digit1 = (l1 != null) ? l1.val : 0;
            int digit2 = (l2 != null) ? l2.val : 0;

            int sum = digit1 + digit2 + carry;
            int digit = sum % 10;
            carry = sum / 10;

            ListNode newNode = new ListNode(digit);
            tail.next = newNode;
            tail = tail.next;

            l1 = (l1 != null) ? l1.next : null;
            l2 = (l2 != null) ? l2.next : null;
        }

        ListNode result = dummyHead.next;
        dummyHead.next = null;
        return result;
    }
}

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
